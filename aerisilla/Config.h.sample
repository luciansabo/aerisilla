// --------------------------------------------------------
// config
// --------------------------------------------------------
// Arduino IDE Board: NodeMCU 1.0 (ESP12E Module) (ESP8266)

const char* DEVICE_NAME = "Aerisilla";

// You should get Auth Token in the Blynk App.
// Go to the Project Settings (nut icon).
const char BLYNK_TOKEN[] = "<your-token>";

// Your WiFi credentials.
// Set password to "" for open networks.
const char ssid[] = "your-ssid";
const char pass[] = "your-password";
const IPAddress staticIP(192, 168, 0, 12); // ESP static ip
const IPAddress gateway(192, 168, 0, 1);   // IP Address of your WiFi Router (Gateway)
const IPAddress subnet(255, 255, 255, 0);  // Subnet mask
const IPAddress dns(1, 1, 1, 1);  // DNS (cloudflare)

const unsigned int WIFI_WAIT_DELAY = 400;           // 400ms
const unsigned int WIFI_CONNECTION_TIMEOUT = 30000; // 30s
const unsigned int WIFI_CHECK_INTERVAL = 50000;     // 50s
const char *WIFI_TEST_DOMAIN = "google.com";
// at 50s check frequency ESP will restart in ~33m if WIFI is stil disconnected;
const uint16_t MAX_WIFI_ERRORS_UNTIL_RESTART = 40;

const unsigned int BLYNK_SERVER_TIMEOUT = 30000;   //  15s blynk server connection timeout
const unsigned int BLYNK_CHECK_INTERVAL = 60000;   // 60s check Blynk server connectivity frequency
// at 60s check frequency ESP will restart in 60m if WIFI is stil disconnected;
const uint16_t MAX_BLYNK_ERRORS_UNTIL_WIFI_RESTART = 60;
// as a last resort, device will be restarted
const uint16_t MAX_BLYNK_ERRORS_UNTIL_DEVICE_RESTART = 60;

// used for Blynk LED indicator
const char* COLOR_GREEN = "#00cc00";
const char* COLOR_BLUE = "#0e7aaf";
const char* COLOR_YELLOW = "#ffff33";
const char* COLOR_ORANGE = "#ffd11a";
const char* COLOR_RED = "#ff3300";
const char* COLOR_GREY = "#cccccc";

// pins
const uint8_t DHT_PIN = 10;            // DHT22 temperature sensor Data pin
const uint8_t INDICATOR_LED_PIN = 15;  // Led indicator output pin
const uint8_t SHARP_LED_PIN = 14;      // Sharp Dust/particle sensor Led Pin
const uint8_t SHARP_VO_PIN = A0;       // Sharp Dust/particle analog out pin used for reading 
const uint8_t BUTTON_PIN = 12;         // front button input pin
const uint8_t DOUT1_PIN = 13;          // digital output 1 (ex: lights relay, mosfet, transistor)
const uint8_t DOUT2_PIN = 16;          // digital output 2 (ex: Air conditioning remote control IR led)

// blynk virtual PINS
const uint8_t BLYNK_ECO2_AVG_PIN = V3;
const uint8_t BLYNK_STATUS_TEXT_PIN = V4;
const uint8_t BLYNK_REALTIME_VOC_PIN = V5;
const uint8_t BLYNK_REALTIME_ECO2_PIN = V6;
const uint8_t BLYNK_REALTIME_DUST_PIN = V8;
const uint8_t BLYNK_DUST_1M_AVG_PIN = V9;

const uint32_t TEMP_READING_INTERVAL = 15010;    // ~15s
const float TEMP_CALIBRATION_FACTOR = 0.982;  // calibrate against known precise thermometer
const float HUMIDITY_CALIBRATION_FACTOR = 1;  // calibrate against known precise thermometer
const uint32_t VOC_READING_INTERVAL = 1000;     // 1s
const uint32_t DUST_READING_TNTERVAL = 4002;     // ~4s
const uint32_t DISPLAY_CHANGE_INTERVAL = 10001;  // ~10s

// average sampling - average resets every minute (1s freq * 60 samples)
const uint16_t vocRunningAverageCount = 60000 / VOC_READING_INTERVAL;
const uint16_t co2RunningAverageCount = 5000 / VOC_READING_INTERVAL;
const uint16_t dustRunningAverageCount = 60000 / DUST_READING_TNTERVAL;
